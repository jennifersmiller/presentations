------------------------------------------
Ch 6 - Functions (part 1 of 3)
	At the end of this presentation you should be able to
		Explain what functions are
		Use pre-defined functions 
		Design and document functions
		Write and call your own C/C++ void functions

------------------------------------------
Overview
	A function is a named block of code
	Functions
		Can receive zero or more pieces of data (arguments/parameters)
		Can return either zero or one value 
		Must be declared (defined) before they can be called (so the compiler knows what it is and if it was passed the proper data types)
	Function synonyms
		Functions are sometimes called procedures, routines, subroutines, or subprograms 
			In C++, they're formally called functions, but informally sometimes called routines
		In OOP, member functions are called methods
------------------------------------------
Using pre-defined functions
	To use a pre-defined function, you need to:
		include the appropriate header file (which contains the function prototype; i.e. definition)
		call it with the proper arguments (see function prototype in c++ reference to determine what those are)
	For Example, to use the pow function:
		cmath needs to be included because it contains the prototype
		When the function is called it needs to be passed 2 arguments because that's what it expects (as per the [[documentation!http://www.cplusplus.com/reference/cmath/pow/]])
		[[code]]
			#include <cmath>	//needed for pow
			 
			using namespace std;
			 
			int main() {
				//saving result of pow() function, then printing
				double cube;
				cube = pow(2,3); //call to pow function [[desc Call to function pow()<br>2 and 3 are passed to the function.  Items passed to a function are called arguments, so 2 and 3 are arguments.<br>pow() returns a value that is then saved in the variable cube]]
				cout << "2 cubed is " << cube << "\n";
				&nbsp;
				//printing function result directly
				cout << "2 cubed is " << pow(2,3);
				
				return 0;
			}
-----------------------------------------------
Some common pre-defined functions
	from <cstdlib>
		abs(x)
	from <cmath>
		fabs(x)
		floor(x)
		ceil(x)
		pow(x,y)
		exp(x)
		cos(x)
	from <cctype>
		tolower(x)
		toupper(x)
	Note: you can look these up in the C++ documentation to get descriptions and how to use them
-----------------------------------------------
Practice
	Find the C++ documentation for the hypot() function:
		determine what header file needs to be included
		determine the number and datatypes of the arguments it expects
		determine what type of data it will return
	Write a program that used the hypot function to find the hypotenuse of a right triangle whose legs are 2.5 and 4.3 units in length.
		
-----------------------------------------------
User Defined Function Design
	User defined functions are functions you write yourself
	For each function you create you'll need to:
		Determine what the function will do
			And come up with a descriptive name
		Determine what the function will return
		Determine the function arguments (if any)
			Arguments are pieces of data passed to the function when it's called
		Determine the logic required to accomplish the function's task
-----------------------------------------------
Example
	If you wanted to write a function to compute the area of a square, you'd detemine the following:
		name:
			areaOfSquare  
		return value: 
			the area of the square
		arguments: 
			side length of the square
		Logic: 
			area = sideLength * sideLength
-----------------------------------------------
Practice
	Determine the following:
		name
		return value (what the function returns)
		arguments (data passed to the function)
		logic
	For functions that do the following:
		computes the perimeter of a rectangle
		computes the area of a circle
		determines if a given character is a vowel or not	
------------------------------------------------
Function Documentation
	A common convention is to precede each function with a comment block providing information about the function and its arguments and return value
	For Example:
	[[code]]
		//===========================================================
		// Function: isVowel
		// Description: determines if the given character is a vowel
		//
		// Argument List:
		// &nbsp; &nbsp; letter (I) - Letter to check	[[desc The I means input.  Later we will learn you can use arguments for output]]
		//
		// Return Value:
		// &nbsp; &nbsp; true - if it is a vowel
		// &nbsp; &nbsp; false - if it is not a vowel
		//===========================================================
	This will be required on assignments for all functions you write
-----------------------------------------------
Practice
	Write the function comment block for the area of a square function given in the earlier example
-----------------------------------------------
Writing User Defined Functions
	For each function you create you'll need to:
		Write a function prototype. The prototype specifies:
			The function name
			The parameter list (list of variables to store the data that is being sent to the function)
			The type of data being returned from the function
		Write the function itself
			First line is function header, looks just like prototype 
			The rest is the function implementation (the function body)
------------------------------------------------
User Defined Void Function Example
	void functions are functions that return no value
	Example
		[[code]]
		// Function Prototype
		void printHello();		[[desc This is a function prototype.<br>Function prototypes specify the function name, argument types, and return type.<br>Prototypes are necessary if the call to the function occurs in the code before the function itself, so when the compiler sees the function call, it knows about the function (it's name, argument types, and return value)]]
		
		//============================================
		//main - entry point for all C and C++ programs
		int main()
		{
			printHello();      //function call  [[desc This is a function call.<br>When the code is compiled, the compiler must know that PrintHello() is a valid function, what arguments it wants, and what type of data it returns.<br>When the program executes, this function call results in all the code within the function to be run before we go to the next line.]]
			printHello();      //function call
			printHello();      //function call
		
			return 1;
		}
		
		//============================================
		// Function: printHello
		// Description: Prints Hello World on screen.
		//============================================
		void printHello()                 // function header [[desc This is a function header.<br>It must match the prototype]]
		{
			cout << "Hello World! \n";    // function body
		} 	[[desc since the function is a void function (and therefore doesn't return anything) the return statement is optional.  When we reach the end of the function we return to where we were called from automatically]]
-----------------------------------------------
Prototype Examples
	Function prototypes 
		are declared at the top of the program (after the includes)
		specify (in this order):
			The type of data being returned from the function
			The function name
			The parameter list (list of variables to store the data that is being sent to the function)
	Examples:
	[[code]]
		#include <iostream>
			
		//prototypes
		void printHello();
		void printCube(int number);
		int sum(int num1, int num2, int num3);
		bool isPrime(int num);
			
		//==========================================
		int main() {
			...
-----------------------------------------------
Practice
	Write function prototypes (just the prototype, NOT the function!) for the following functions:
		A function named printName
			that accepts no arguments
			prints your name on the screen
			return nothing
		A function named printSquare
			that accepts an integer argument 
			prints the square of that value to the screen
			returns nothing
		A function named add
			that accepts two double arguments
			adds them together
			and returns the result 
		A function named isPrime
			that accepts an integer argument
			determins if it's prime or not
			and returns TRUE if it is, and FALSE otherwise
-----------------------------------------------
Practice
	Write the implementation of the following function.
	[[code]]
		//==================================================
		// Function: printName
		// Description: Prints my name on screen 
		// Arguments: none:
		// Return value: none:
		//==================================================
	Then call it from main 10 times using a loop.

------------------------------------------
Ch 4 - Selection Structures, part 1
	At the end of this presentation you should be able to
		Use if and if/else statements to conditionally execute one or more lines of code
		Explain why proper indentation is important
		List and explain all the relational operators 
		Explain how strings are compared
		Explain the potential problem with comparing floats
		Use the logical && (and), || (Or), and ! (not) operators

------------------------------------------
If statement
	If allows you to conditionally execute blocks of code
	Basic Format
		[[code]]
		if (expression that evalutes to true or false) 
			statement done if true;
	Example
		[[code]]
		if (grade > 90)
			cout &lt;&lt; "You earned an A! \n";
-------------------------------------------
Compound Statements
	If you wish to have more than one line conditionally executed (ie. in the body of the if), you need to use { }
	Correct Example - only prints "You're brilliant!" if grade is an A
		[[code]]
		if (grade=='A')
		{
			cout &lt;&lt; "Your grade is an 'A'";
			cout &lt;&lt; "You're brilliant!";
		}
	Incorrect Examples - prints "You're brilliant!" regardless of grade value
		[[code]]
		if (grade > 90)
			cout &lt;&lt; "Your grade is an 'A'";
			cout &lt;&lt; "You're brilliant!";

-------------------------------------------
IF Else statements
	An if statement can be followed by an else that conditionally executes code when the if expression is false
	[[code]]
		if (some expression that evalutes to true or false) 
			statement done if true;
		else
			statement done if false;
	For example:
	[[code]]	
		if (grade > 90)
			cout &lt;&lt; "You earned an A! \n";
		else
			cout &lt;&lt; "You didn't earn an A. \n";
			
		if (grade > 90) {
			cout &lt;&lt; "You earned an A! \n";
			cout &lt;&lt; "You're brilliant!";
		}
		else {
			cout &lt;&lt; "You did not earn an A\n";
			cout &lt;&lt; "But you could still be brilliant!";	
		}
------------------------------------------
Indentation
	Indentation is for readability (which is crucial in avoiding bugs)
	Good
		[[code]]
		if (x == 1)
			cout &lt;&lt; "x is 1!";
		else
			cout &lt;&lt; "x is not 1.";
	Bad
		[[code]]
		if (x == 1)
		cout &lt;&lt; "x is 1!";
		else
		cout &lt;&lt; "x is not 1.";
	The bad example will still compile and run, but is more difficult to read.

------------------------------------------
Relational operators
	The following is a list of all the available relational operators that can be used in an if statement
		== equal to
		!= not equal to
		&lt; less than
		&lt;= less than or equal to
		> greater than
		>= greater than or equal to
	Examples of use:
		[[code]]
		if (x == 3)
			...;
		&nbsp;
		if (x != 34)
			...;
		&nbsp;
		if (x &lt;= 0)
			...;

-------------------------------------------
Practice
	Enter (or cut and paste) the code below into the editor and the following
		an if statement that prints out "x is 42" if it's 42
		an if else statement that prints out "x is negative" if it's less than 0 or "x is positive" if it's not less than 0
		an if else statement that has 2 lines in both the if body and else body.
		[[code]]
			#include <iostream>
			
			using namespace std;
			
			int main() {
				int x;
				
				//get user input
				cout << "Enter an integer: ";
				cin >> x;
				
				//do some comparisons
				
				
				
					
				return 1;
			}
------------------------------------------
Common Mistakes
	The following exhibits common mistakes:
	[[code]]
		if (x=5)
			cout &lt;&lt; "X is Five!";
		
		if (x>10);
			cout &lt;&lt; "X is greater than 10";
			
		if (x<0)
			cout &lt;&lt; "X is less than 0 \n";
			cout &lt;&lt; "that means it's negative!";
	All those examples compile and run, but don't do what is intended

------------------------------------------
Comparison rules
	Only similar types should be compared, integer to integer, float to float, etc. 
	Comparing different types (int to float) can result in unexpected results
	Comparing characters
		The ascii value of the characters is used.
		So 'a' > 'A', because 97 > 65
		and 'A' > '9' because 65 > 57
	Comparing strings
		Character by character comparison is done until inequality is found.
		"Sue" > "Sam" because u > a
		"Bill" &lt "Billy" because null (the string terminator) is &lt; y
	Comparing floats
		Comparing floats for equality can be a problem.  Just don't do it.
			(1.0)/3 * 3 should be equal to 1.0 but probably won't be...

-------------------------------------------
Logical Operators
	The logical (boolean) operators are
		&& - and
		|| - or
		! - not
	All these work with logical (true/false) operands
	Notes: 
		And is &&, not & (& is a bitwise operator, which is used for something entirely different)
		Ditto for or (Use ||, not |, as | is also a bitwise operator)

-------------------------------------------
And and Or
	And (&&) and Or (||) are used to combine multiple boolean values [[img images/TruthTable.png]]
	Examples:
		[[code]]
		if ((x > 5) && (x &lt; 7))
			...
			&nbsp;
		if ((X > 5) || (Y > 5))
			...
	Order of Precendence
		&& and || are done after relational operators and &&s are done before ||s 
		As always ( ) can change this or simply add clarification.
	Short Circuit Evaluation:
		Expression is evaluated from left to right and evaluation stops when answer is known, so the last part of the expression may not get evaulated.  Sometimes this matters, so remember it!
--------------------------------------------
Practice
	Add code to the previous example to:
		create another integer variable named y
		prompt the user to enter another integer and store it in y
		print "those are both over 100" if x and y are both greater than 100
		print "those are both 0" if x and y are both 0
		print "at least one of those is negative" if one of them is negative.
--------------------------------------------
Not
	! (not) is a unary operator, it must be followed by one logical operand (i.e a true/false value)
	It returns the opposite of the operand
	examples:
		!(2 > 5) returns true (because 2 > 5 is false)
		!(1==1) returns false (because 1==1 is true)
	Use it sparingly, as it can be confusing
		!( 2 > 5) should be written as  ( 2 &lt;= 5 )
		!(1==1) should be written as (1 != 1)
	
--------------------------------------------
Misc
	The if expression typically evaluates to a boolean (true/false), but integers work as well
		Any non-zero value is considered true
		0 is considered false
	The if expression doesn't need to make use of comparison operators, it could be a function call.  
	For example:
		[[code]]
		if ( isUpper(letter) )
			cout &lt;&lt; "The letter is uppercase.\n";
	The not operator (!) can be used in front of the function call to give the opposite result
	[[code]]
		if (! isUpper(letter) )
			cout &lt;&lt; "The letter is not uppercase.\n";
--------------------------------------------
Practice
	Modify your previous example to 
		Get a character from the user
		Prints out wether the entered character is a letter or not (twice)
			The first time using an if expression that consists of a combination of logical and boolean operators
			The 2nd time using the isalpha() function to do the same thing
	When run, the output will be similar to this:
	[[code]]
		Please enter a character: 7
			
		7 is not a letter
		7 is not a letter

	
	

------------------------------------------
Ch 6 - Functions (part 2 of 3)
	This presentation is a continuation of the function presentation begun in part 1.
	Part 1 covered
		What functions are
		How to use pre-defined functions 
		How to design and document functions
		How to write and call your own void functions in C/C++
	At the end of this presenation you should be able to
		Write and call your own value functions in C/C++
		Explain what Function Arguments and Parameters are
		Use function arguments/parameters to pass data to a function

------------------------------------------------
User Defined Value Function
	Value returning functions return a value
	Example
		[[code]]
		// Function Prototype
		int getFavoriteNumber();
		
		//==========================================
		int main()
		{
			int favNum = 0;
			
			favNum = getFavoriteNumber(); //function call
			cout << "My favorite number is << favNum;
			
			return 1;
		}
		
		//=======================================
		// function: getFavoriteNumber
		// Description: returns author's favorite number
		// returns:	42
		//========================================
		int getFavoriteNumber()
		{
			return 42; [[desc return statements are required if the function returns a value. <br>When the return statement is reached, the function ends and returns the value specified on the retun statement.<br>If there were lines in the function after the return statement, they wouldn't execute.]]
		}
-------------------------------------------
Function (local) variables
	Variables declared inside functions are "local" to the function. 
	They are:
		created when the function is called
		accessible only within the function.
		destroyed when the function exits
	For example
		[[code]]
		//=======================================
		int getFavoriteNumber()
		{
			int favNum;
			
			favNum = 40 + 2;
			
			return favNum;
		}		
		
-------------------------------------------
Practice
	Write a function called getLetter() that
		prompts the user for a capital letter
		verifies what was enter is a capital letter
			prints an error message and reprompts until a letter entered
		returns the letter (as a character)
	Then...
		Call this function twice from main() putting the returned results into variables named letterOne and letterTwo.
	
------------------------------------------
Arguments/ Parameters
	The data passed to a function is referred to as arguments
		When you call a function, you pass it arguments
		Arguments are actual values (although those values may come from variables)
		[[code]]
			//function call
			x=pow(3,5); //3 and 5 are arguments
	The variables a function uses to store the data it receives are called parameters
		These variables are declared on the same line as the function name and are known as the parameter list
		[[code]]
			//function prototype: base and exponent are parameters
			double pow( double base, double exponent ); 
	Sometimes these terms (arguments/parameters) are used interchangeably
	The book uses another (less common) terminology.  It refers to
		arguments as actual parameters
		parameters as formal parameters
-------------------------------------------
Example 
	[[code]]
		// function prototype
		int add( int num1, int num2);   //num1 and num2 are parameters       
		
		// ===========================================
		int main()
		{
			int x=1, y=2, z;
			
			z = add(2, 3);      // 2 and 3 are arguments
			cout << z << endl;
			z = add(x, y);      // 1 & 2 (contents of x & y) are args
			cout << z << endl;
			z = add(1, y);      // 1 and 2 (content of y) are args
			cout << z << endl;
			
			return 1;
		}
		
		// ===========================================
		// Function implementation (header + body)
		int add( int num1, int num2)
		{
			return num1 + num2;
		}
-------------------------------------------
Example 
	[[code]]
		// function prototype
		int add( int num1, int num2);   //num1 and num2 are parameters       
		
		// ==========================
		int main()
		{
			int x=1, y=2, z;
			float f;
			
			x = add(1, 2);    //return an int, stores it in an int
			f = add(1, 2);    //works fine, implicit conversion occurs
			
			z = add(1, 2, 3); //doesn't compile, too many args
			z = add(1, 2.0);  //doesn't compile, wrong arg type
			  
			add(5, 6);		  //calls function but ignores result
					
			return 1;
		}
-----------------------------------------------
Practice
	Write a function named isEven() that:
		accepts an integer as an argument
		returns true if it's even [[(note: 0 is even)!http://en.wikipedia.org/wiki/Parity_of_zero]]
		returns false if it's odd

	Write a function named lowest that:
		receives two integer values as arguments
		returns: Whichever of the two arguments is lowest
		Call it from main a few times with different values to verify it works in all cases

	Note: don't forget the function documentation!
------------------------------------------------
Misc
	The prototype doesn't technically need the parameter names, just the data types
		This works:
			[[code]]
			void printHello( int );
		But supplying the name provides additional information, so this is preferred:
			[[code]]
			void printHello( int NumberOfTimesToPrint );
	If the function is located in the source file BEFORE it's called, the prototype isn't necessary at all, as the function header will double as the prototype.
		[[code]]
		//Print Hi on the screen
		void printHi() { //function header doubles as prototype
			cout << "Hi";
		}
		
		//=======================================================
		int main() {
			...
			printHi();  //calling a function located early in source file
			...
		}
	The coding conventions for the class mandate you use prototypes and have main() as the first function.

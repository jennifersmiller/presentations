------------------------------------------
Ch 1, part 1 - Programming Languages
	At the end of this presentation you should be able to
		explain the components in a computer and how they relate to software
		understand the differences between machine code, assembly, and high level languages, and why each exists
		be able to do stepwise refinement on an everyday task

------------------------------------------
Hardware and Software
	Hardware
		CPU
		Main Memory (RAM)
		Secondary Storage (disk)
		I/O Devices
	Software
		System Programs (OS)
		Application Programs

------------------------------------------
Programming Language Evolution
	In the beginning there was only	[[Machine Language!http://en.wikipedia.org/wiki/Machine_code]] 
		Machine language is the CPUs native language.  
		It's what all executable code is, even today. 
		But writing in it is tedious and error prone.
	Example (displayed in hex)
	[[code]]
		a5 45 23 a6 [[desc load a value from memory into CPU register eax]]
		6b 45 23 aa [[desc Multiplies value in eax by value in memory, store result in eax]]
		a5 23 ad 45 [[desc store value from eax to memory]]
	Douglas Hofstadter (author of [[Hoftadter's law!https://en.wikipedia.org/wiki/Hofstadter%27s_law]]) compares machine code with the genetic code
		"Looking at a program written in machine language is vaguely comparable to looking at a DNA molecule atom by atom."
	That said, Paul Allen (co-founder of Microsoft) wrote a bootloader for DOS in machine language while on a plane to the first potential Microsoft Customer.  It worked.
------------------------------------------
Evolution continued
	Machine code runs, but is difficult to work with, so Assembly was soon invented
	[[Assembly!http://en.wikipedia.org/wiki/Assembly_language]] langauge is an "english" version of Machine code. 
		Each assembly instruction is written as a mnemonic (short word)
		One line of assembly equates to one line of machine code (typically)
		For Intel-compatible processors, the Assembly used is the [[x86 instruction set!http://en.wikipedia.org/wiki/X86_instruction_listings]]
	Example
	[[code]]
		mov     eax,dword ptr [length]  [[desc load a value from memory into CPU register eax]]
		imul    eax,dword ptr [width]  [[desc Multiplies value in eax by value in memory, store result in eax]]
		mov     dword ptr [areaRectangle],eax	[[desc store value from eax to memory]]
	A program written in assembly requires an Assembler to translate the Assembly language to Machine Language
		An assembler is also a program
---------------------------------------------
Evolution continued
	Assembly is certainly better than machine code, but it's still very tedious to write, so high level languages have been developed
		"High-level language" refers to the higher level of abstraction from machine language
		One line of a high level language might result in 10s or 100s of lines of machine code
	Example
	[[code]]
		areaRectangle = length * width; [[desc muliples the value stored in length by the value stored in width and puts the result into areaRectangle]]
	A program written in a high level language requires a compiler to translate the language to Machine Language
		Compiler output is referred to as object code, but in most cases this is machine language
	There are [[hundreds!http://en.wikipedia.org/wiki/List_of_programming_languages]] of high level languages. Some [[you may have heard of!http://en.wikipedia.org/wiki/Measuring_programming_language_popularity]] are
		Fortran (the first, not popular anymore)
		C, C++, Objective C, Java
		Visual Basic, C#
		PHP, Javascript
-----------------------------------------------
The goal of High Level Languages
	When CPUs were slow and memory was expensive, program performance was king
	As CPUs have gotten [[faster!http://en.wikipedia.org/wiki/Million_instructions_per_second#Million_instructions_per_second]] and memory cheaper, programmer productivity has become king.  
	The goal of all high level languages is to increase programmer productivity. 
-------------------------------------------
Programming Methodologies
	Programming methodologies are ways to break complex systems (or tasks) into pieces that can then be implemented.
	Structured Programming (top-down / stepwise refinement / modular programming)
		breaks a task down into smaller steps, then each of those steps into small steps
			This continues until the steps are small enough to be written as lines of code
		This process is esential to all programming, even OOP.
		This process can be practiced on real-life events
			for example: [[making pancakes!https://en.wikibooks.org/wiki/A-level_Computing/AQA/Problem_Solving,_Programming,_Data_Representation_and_Practical_Exercise/Problem_Solving/Top-down_design_and_Step-wise_refinement]]
	Object Oriented (OOP)
		Begins process by breaking down the system (i.e. program) into distinct components called objects.
		Objects are then assigned properties and actions.
		Actions are then implemented (using stepwise refinement if they're complex)

-------------------------------------------
Programming Process
	Solving Problems by programming includes numerous steps as shown in the diagram on the right [[img images/BuildProcess.png]]
	The hard part (requires intensive use of brain)
		Analysis
		Algorithm Design
	The easy part (requires [[SDK!http://en.wikipedia.org/wiki/Software_development_kit]], made easier with [[IDE!http://en.wikipedia.org/wiki/Integrated_development_environment]])
			Writing Code  and building executable
	Note: Many (i.e. most) beginning programmers combine the Coding with the Analysis and Algorithm design
		This makes the process harder than it should be
		And wastes lots of time
